{"ast":null,"code":"import _slicedToArray from \"/Users/akinori/Documents/fullstackopen/unicafe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/akinori/Documents/fullstackopen/unicafe/src/index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Button = ({\n  value,\n  setter,\n  label\n}) => {\n  const handleClick = () => setter(value + 1);\n\n  return React.createElement(\"button\", {\n    onClick: () => handleClick(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, label);\n};\n\nconst Display = ({\n  value,\n  label\n}) => {\n  return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, label, \" \", value);\n};\n\nconst Statistics = props => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, props.text), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, props.value)));\n};\n\nconst App = () => {\n  // save clicks of each button to own state\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        good = _useState2[0],\n        setGood = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        neutral = _useState4[0],\n        setNeutral = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        bad = _useState6[0],\n        setBad = _useState6[1];\n\n  const all = good + neutral + bad;\n  const ave = (good + bad * -1) / all;\n  const positive = good / all * 100;\n  let statistics = React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"No feedback given\"));\n\n  if (good !== 0 || neutral !== 0 || bad !== 0) {\n    statistics = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(Statistics, {\n      text: \"good\",\n      value: good,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(Statistics, {\n      text: \"neutral\",\n      value: neutral,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(Statistics, {\n      text: \"bad\",\n      value: bad,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(Statistics, {\n      text: \"all\",\n      value: all,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(Statistics, {\n      text: \"ave\",\n      value: ave,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), React.createElement(Statistics, {\n      text: \"positive\",\n      value: positive,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Give feedback\"), React.createElement(Button, {\n    value: good,\n    setter: setGood,\n    label: 'good',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), React.createElement(Button, {\n    value: neutral,\n    setter: setNeutral,\n    label: 'neutral',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(Button, {\n    value: bad,\n    setter: setBad,\n    label: 'bad',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), statistics);\n};\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 77\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/akinori/Documents/fullstackopen/unicafe/src/index.js"],"names":["React","useState","ReactDOM","Button","value","setter","label","handleClick","Display","Statistics","props","text","App","good","setGood","neutral","setNeutral","bad","setBad","all","ave","positive","statistics","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Button = ({ value, setter, label }) => {\n  const handleClick = () => setter(value + 1)\n  return (\n    <button onClick={() => handleClick()}>\n      {label}\n    </button>\n  )\n}\n\nconst Display = ({ value, label }) => {\n  return (\n    <p>\n      {label} {value}\n    </p>\n  )\n}\n\nconst Statistics = (props) => {\n  return (\n    <div>\n      <tr>\n        <td>\n          {props.text}\n        </td>\n        <td>\n          {props.value}\n        </td>\n      </tr>\n    </div>\n  )\n}\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  const all = good + neutral + bad\n  const ave = (good + bad * -1) / all\n  const positive = good / all * 100\n\n  let statistics =\n    <div>\n      <p>\n        No feedback given\n      </p>\n    </div>\n\n  if (good !== 0 || neutral !== 0 || bad !== 0) {\n    statistics =\n      <div>\n        <Statistics text='good' value={good} />\n        <Statistics text='neutral' value={neutral} />\n        <Statistics text='bad' value={bad} />\n        <Statistics text='all' value={all} />\n        <Statistics text='ave' value={ave} />\n        <Statistics text='positive' value={positive} />\n      </div>\n  }\n\n  return (\n    <div>\n      <h1>Give feedback</h1>\n      <Button value={good} setter={setGood} label={'good'} />\n      <Button value={neutral} setter={setNeutral} label={'neutral'} />\n      <Button value={bad} setter={setBad} label={'bad'} />\n\n      {statistics}\n    </div>\n  )\n}\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n)\n"]},"metadata":{},"sourceType":"module"}