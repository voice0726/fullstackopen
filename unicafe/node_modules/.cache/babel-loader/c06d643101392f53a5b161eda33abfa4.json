{"ast":null,"code":"import _slicedToArray from \"/Users/akinori/Documents/fullstackopen/unicafe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/akinori/Documents/fullstackopen/unicafe/src/index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Button = ({\n  value,\n  setter,\n  label\n}) => {\n  const handleClick = () => setter(value + 1);\n\n  return React.createElement(\"button\", {\n    onClick: () => handleClick(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, label);\n};\n\nconst Display = ({\n  value,\n  label\n}) => {\n  return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, label, \" \", value);\n};\n\nconst Statistics = ({\n  good,\n  neutral,\n  bad\n}) => {\n  const all = good + neutral + bad;\n  const ave = (good + bad * -1) / all;\n  const positive = good / all * 100;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"Statistics\"), React.createElement(Display, {\n    value: good,\n    label: 'good',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), React.createElement(Display, {\n    value: neutral,\n    label: 'neutral',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), React.createElement(Display, {\n    value: bad,\n    label: 'good',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), React.createElement(Display, {\n    value: all,\n    label: 'all',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), React.createElement(Display, {\n    value: ave,\n    label: 'average',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }), React.createElement(Display, {\n    value: positive + ' %',\n    label: 'positive',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }));\n};\n\nconst App = () => {\n  // save clicks of each button to own state\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        good = _useState2[0],\n        setGood = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        neutral = _useState4[0],\n        setNeutral = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        bad = _useState6[0],\n        setBad = _useState6[1];\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Give feedback\"), React.createElement(Button, {\n    value: good,\n    setter: setGood,\n    label: 'good',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), React.createElement(Button, {\n    value: neutral,\n    setter: setNeutral,\n    label: 'neutral',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), React.createElement(Button, {\n    value: bad,\n    setter: setBad,\n    label: 'bad',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }));\n};\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 61\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/akinori/Documents/fullstackopen/unicafe/src/index.js"],"names":["React","useState","ReactDOM","Button","value","setter","label","handleClick","Display","Statistics","good","neutral","bad","all","ave","positive","App","setGood","setNeutral","setBad","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Button = ({ value, setter, label }) => {\n  const handleClick = () => setter(value + 1)\n  return (\n    <button onClick={() => handleClick()}>\n      {label}\n    </button>\n  )\n}\n\nconst Display = ({ value, label }) => {\n  return (\n    <p>\n      {label} {value}\n    </p>\n  )\n}\n\nconst Statistics = ({ good, neutral, bad }) => {\n\n  const all = good + neutral + bad\n  const ave = (good + bad * -1) / all\n  const positive = good / all * 100\n\n  return (\n    <div>\n      <h1>Statistics</h1>\n      <Display value={good} label={'good'} />\n      <Display value={neutral} label={'neutral'} />\n      <Display value={bad} label={'good'} />\n      <Display value={all} label={'all'} />\n      <Display value={ave} label={'average'} />\n      <Display value={positive + ' %'} label={'positive'} />\n    </div>\n  )\n}\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n\n\n  return (\n    < div >\n      <h1>Give feedback</h1>\n      <Button value={good} setter={setGood} label={'good'} />\n      <Button value={neutral} setter={setNeutral} label={'neutral'} />\n      <Button value={bad} setter={setBad} label={'bad'} />\n\n\n\n    </div >\n  )\n}\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n)\n"]},"metadata":{},"sourceType":"module"}