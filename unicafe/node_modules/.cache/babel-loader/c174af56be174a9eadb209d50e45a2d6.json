{"ast":null,"code":"import _slicedToArray from \"/Users/akinori/Documents/fullstackopen/unicafe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/akinori/Documents/fullstackopen/unicafe/src/index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Button = ({\n  value,\n  setter,\n  label\n}) => {\n  const handleClick = () => setter(value + 1);\n\n  return React.createElement(\"button\", {\n    onClick: () => handleClick(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, label);\n};\n\nconst Display = ({\n  value,\n  label\n}) => {\n  return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, label, \" \", value);\n};\n\nconst Statistics = props => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, props.text, \" \", props.value));\n};\n\nconst App = () => {\n  // save clicks of each button to own state\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        good = _useState2[0],\n        setGood = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        neutral = _useState4[0],\n        setNeutral = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        bad = _useState6[0],\n        setBad = _useState6[1];\n\n  const all = good + neutral + bad;\n  const ave = (good + bad * -1) / all;\n  const positive = good / all * 100;\n\n  if (good !== 0 || neutral !== 0 || bad !== 0) {\n    const statistics = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(Statistics, {\n      text: \"good\",\n      value: good,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"Give feedback\"), React.createElement(Button, {\n      value: good,\n      setter: setGood,\n      label: 'good',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(Button, {\n      value: neutral,\n      setter: setNeutral,\n      label: 'neutral',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(Button, {\n      value: bad,\n      setter: setBad,\n      label: 'bad',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(Statistics, {\n      text: \"\",\n      value: good,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }));\n  }\n\n  ReactDOM.render(React.createElement(App, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), document.getElementById('root'));\n};","map":{"version":3,"sources":["/Users/akinori/Documents/fullstackopen/unicafe/src/index.js"],"names":["React","useState","ReactDOM","Button","value","setter","label","handleClick","Display","Statistics","props","text","App","good","setGood","neutral","setNeutral","bad","setBad","all","ave","positive","statistics","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Button = ({ value, setter, label }) => {\n  const handleClick = () => setter(value + 1)\n  return (\n    <button onClick={() => handleClick()}>\n      {label}\n    </button>\n  )\n}\n\nconst Display = ({ value, label }) => {\n  return (\n    <p>\n      {label} {value}\n    </p>\n  )\n}\n\nconst Statistics = (props) => {\n  return (\n    <div>\n      <p>\n        {props.text} {props.value}\n      </p>\n    </div>\n  )\n}\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  const all = good + neutral + bad\n  const ave = (good + bad * -1) / all\n  const positive = good / all * 100\n\n  if (good !== 0 || neutral !== 0 || bad !== 0) {\n    const statistics =\n      <div>\n        <Statistics text='good' value={good} />\n      </div>\n\n    return (\n      <div>\n        <h1>Give feedback</h1>\n        <Button value={good} setter={setGood} label={'good'} />\n        <Button value={neutral} setter={setNeutral} label={'neutral'} />\n        <Button value={bad} setter={setBad} label={'bad'} />\n\n        <Statistics text='' value={good} />\n\n      </div >\n    )\n  }\n\n  ReactDOM.render(<App />,\n    document.getElementById('root')\n  )\n}\n"]},"metadata":{},"sourceType":"module"}